import React, { useState, useEffect } from 'react';
import { Message, Header } from 'semantic-ui-react';
import { useHistory } from 'react-router-dom';
import QRCode from 'qrcode.react';
// import OnBoardingLogo from '../layout/OnBoardingLogo';
// import UserPanel from '../layout/TopBar/UserPanel';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import Stack from '@mui/material/Stack';
import LoadingButton from '@mui/lab/LoadingButton';
import { useDispatch } from 'react-redux';
import axiosInstance from '../../api/api';
import { Link, Typography } from '@mui/material';
import AuthHeader from '../auth/AuthHeader';
import { setCompanies, setMaturityLevels, setPWDRotation, setSupplier, setUser } from '../../actions';
// import { setParentDocument, setUser, setUserPermissions, setUserRoles } from '../../actions';

const ConfigureMFA = ({ user, token, location }) => {
    const history = useHistory();
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState([]);
    const [qrCodeUrl, setQrCodeUrl] = useState('');
    const [secret, setSecret] = useState('');
    const [otp, setOtp] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [later, setLater] = useState(true);

    const dispatch = useDispatch();

    useEffect(() => {
        let isMounted = true;
        axiosInstance.get('/api/auth/2fa/setup')
            .then(response => {
                setSecret(response.data.secret);
                setQrCodeUrl(response.data.qrCodeUrl);
            })
            .catch(error => console.error('Error fetching 2FA setup:', error));

        return () => {
            isMounted = false;
        };
    }, []);

    useEffect(() => {
        const params = new URLSearchParams(location.search);
        const strict = params.get('strict');
        if (strict) {
            setLater(false);
        }
    }, [location.search]);

    const handleOtpChange = (e) => {
        setOtp(e.target.value);
    };

    const handleVerify = () => {
        setLoading(true);
        axiosInstance.post('/api/auth/2fa/enable', { otp })
            .then(response => {
                setSuccessMessage('2FA configured successfully.');
                setErrorMessage('');

                const params = new URLSearchParams(location.search);
                const redirect = params.get('redirect');

                setUserData(response.data);
                setSecret('');
                setQrCodeUrl('');
                

                if (redirect) {
                    history.push(redirect);
                }
                else {
                    history.push(response.data.redirect);
                }

            })
            .catch(error => {
                setSuccessMessage('');
                setErrorMessage('Verification failed. Please try again.');
            })
            .finally(() => setLoading(false));
    };

    const handleSetUpLater = () => {
        axiosInstance.get('/api/auth/2fa/later')
            .then(response => {
                setUserData(response.data);
                setSecret('');
                setQrCodeUrl('');
                history.push(response.data.redirect);
            })
            .catch(error => console.error('Error fetching 2FA setup:', error));
    }

    const setUserData = (data) => {
        dispatch(setUser(data.user));
        dispatch(setCompanies(data.companies));
        dispatch(setMaturityLevels(data.maturity_levels));
        dispatch(setSupplier(data.supplier));
        dispatch(setPWDRotation(data.pwd_rotaion));
    }

    const renderLater = later => {
        return (later ? <Link onClick={handleSetUpLater} underline="none">
            Set up later
        </Link> : '');
    };

    return (
        <div className="">

            <AuthHeader signup={false} />


            <div className="row justify-content-md-center" style={{ marginTop: '50px' }}>
                <div className="col-md-6">
                    <Typography variant="h4" sx={{ color: '#fff' }}>
                        Secure your account with two-factor authentication
                    </Typography>
                    <Typography sx={{ color: '#fff' }}>
                        To enhance the security of your account, we use multi-factor authentication (MFA).
                        MFA adds an extra layer of protection by requiring you to enter a one-time password (OTP)
                        generated by an authenticator app on your smartphone.
                    </Typography>
                    <Typography sx={{ color: '#fff', mb: 1 }}>
                        <strong>Step 1:</strong> Scan the QR code below with an authenticator app such as Google Authenticator
                        or Microsoft Authenticator. If you cannot scan the QR code, you can enter the provided secret manually
                        into your authenticator app.
                    </Typography>
                    <QRCode value={qrCodeUrl} size={200} />
                    <Typography sx={{ color: '#fff' }}>Secret: {secret}</Typography>

                    <Box
                        component="form"
                        sx={{
                            '& > :not(style)': { width: '25ch' },
                        }}
                        noValidate
                        autoComplete="off"
                    >
                        <TextField onChange={handleOtpChange} id="outlined-basic" label="Enter OTP" variant="outlined" />
                    </Box>

                    <Stack spacing={2} direction="row" sx={{ marginTop: '20px', display: 'flex', justifyItems: 'center' }}>

                        <LoadingButton size='large' onClick={handleVerify} loading={loading} variant="contained">
                            Verify OTP
                        </LoadingButton>

                        {/* {renderLater(later)} */}
                    </Stack>

                    {errorMessage && <Message negative>{errorMessage}</Message>}
                    {successMessage && <Message positive>{successMessage}</Message>}


                </div>
            </div>
        </div>
    );
};

export default ConfigureMFA;