import React, { useState } from 'react';
import { Message } from 'semantic-ui-react';
import { useHistory } from 'react-router-dom';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import LoadingButton from '@mui/lab/LoadingButton';
import { useDispatch } from 'react-redux';
import axiosInstance from '../../api/api';
import { Typography } from '@mui/material';
import AuthHeader from '../auth/AuthHeader';
import { setCompanies, setMaturityLevels, setPWDRotation, setSupplier, setUser } from '../../actions';

const VerifyMFAOTP = ({ user, token, location }) => {
    const history = useHistory();
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState([]);
    const [otp, setOtp] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    const dispatch = useDispatch();

    const handleOtpChange = (e) => {
        setOtp(e.target.value);
    };

    const handleVerify = () => {
        setLoading(true);
        axiosInstance.post('/api/auth/2fa/verify', { otp })
            .then(response => {
                setSuccessMessage('2FA configured successfully.');
                setErrorMessage('');

                const params = new URLSearchParams(location.search);
                const redirect = params.get('redirect');

                setUserData(response.data);

                if (redirect) {
                    history.push(redirect);
                }
                else {
                    history.push(response.data.redirect);
                }

            })
            .catch(error => {
                setSuccessMessage('');
                setErrorMessage('Verification failed. Please try again.');
            })
            .finally(() => setLoading(false));
    };

    const setUserData = (data) => {
        dispatch(setUser(data.user));
        dispatch(setCompanies(data.companies));
        dispatch(setMaturityLevels(data.maturity_levels));
        dispatch(setSupplier(data.supplier));
        dispatch(setPWDRotation(data.pwd_rotaion));
    }

    return (
        <div className="">


            <>
                <AuthHeader signup={false} />
            </>

            <Box sx={{ display: 'flex', marginTop: '30px' }}>
                <Box sx={{ flex: '0.5', marginRight: '50px', marginTop: '50px', fontSize: '19px' }}>
                </Box>

                <Box sx={{ flex: '0.5', padding: '20px', borderRadius: '6px', mt: '50px' }}>
                    <Typography variant="h4" sx={{ color: '#fff' }}>Multi-Factor Authentication</Typography>
                    <Typography sx={{ marginBottom: '50px', color: '#fff' }}>Verify Your Authentication Code</Typography>

                    <p style={{ width: '50%', color: '#fff' }}>
                        Please enter the 6-digit code generated by your authenticator app (Google Authenticator or Microsoft Authenticator) to complete the login process. This code changes every 30 seconds. If you encounter any issues, please ensure your device's time settings are correct and try again.
                    </p>

                    <Box sx={{ marginBottom: '15px', width: '45%' }}>
                        <TextField fullWidth label="Verification Code" variant="outlined"
                            onChange={handleOtpChange}
                            name="otp" value={otp}
                        // className={classNames(this.handlerInputError(errors, 'code'), 'build__input')}
                        />
                        {/* {displayInputError(errors, 'code')} */}
                    </Box>

                    {/* <Box sx={{ marginBottom: '15px', width: '45%' }}>
                            <Checkbox onChange={this.toggle} checked={remember_me} toggle label="Remember this browser for next 2 weeks." />
                        </Box> */}

                    {errorMessage && <Message negative>{errorMessage}</Message>}
                    {successMessage && <Message positive>{successMessage}</Message>}

                    <Box sx={{ display: 'flex' }}>
                        <LoadingButton
                            onClick={handleVerify}
                            type="button"
                            size='large'
                            sx={{ paddingRight: '40px', paddingLeft: '40px', marginRight: '20px' }}
                            loading={loading}
                            loadingIndicator="Verifing..."
                            variant="contained">
                            Verify
                        </LoadingButton>
                    </Box>

                </Box>
            </Box>
        </div>
    );
};

export default VerifyMFAOTP;